---
import { Image } from "astro:assets";
import Base from "@/layouts/Base.astro";
import products from "@/lib/fixtures/tpt_products_MOST_RECENT.json";
import * as cheerio from "cheerio";

export async function getStaticPaths() {
  const CURRENCY_VARIANTS = {
    US: { suffix: "US", currency: "USD", symbol: "$" },
    CA: { suffix: "CA", currency: "CAD", symbol: "CA$" },
    IE: { suffix: "IE", currency: "EUR", symbol: "€" },
    UK: { suffix: "UK", currency: "GBP", symbol: "£" },
  } as const;

  const extractFirstParagraph = (htmlString) => {
    const $ = cheerio.load(htmlString);
    return $("p").first().prop("outerHTML");
  };

  const createProductVariant = (
    product,
    variantKey: keyof typeof CURRENCY_VARIANTS | "" = "",
  ) => {
    const variant = variantKey ? CURRENCY_VARIANTS[variantKey] : { suffix: "", currency: "USD", symbol: "$" };
    return {
      props: {
        product: {
          ...product,
          description: extractFirstParagraph(product.description),
          id: `${product.slug}${variant.suffix ? `-${variant.suffix}` : ""}`,
          currency: variant.currency,
          currencySymbol: variant.symbol,
        },
      },
      params: { id: `${product.slug}${variant.suffix ? `-${variant.suffix}` : ""}` },
    };
  };

  return products.flatMap((product) => [
    createProductVariant(product),
    ...Object.keys(CURRENCY_VARIANTS).map((key) => createProductVariant(product, key as keyof typeof CURRENCY_VARIANTS)),
  ]);
}

const { product } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const price = product.currencies[product.currency];

const getCountryInfo = (id) => {
  const suffix = id.split('-').pop();
  switch (suffix) {
    case 'US':
      return { name: "United States", identifier: "US", currency: "USD" };
    case 'CA':
      return { name: "Canada", identifier: "CA", currency: "CAD" };
    case 'IE':
      return { name: "Ireland", identifier: "IE", currency: "EUR" };
    case 'UK':
      return { name: "United Kingdom", identifier: "UK", currency: "GBP" };
    default:
      return { name: "United States", identifier: "US", currency: "USD" }; // Default to US if no match
  }
};

const countryInfo = getCountryInfo(product.id);
const sku = product.id.split('-').slice(-2).join('-');


const ProductSchema = JSON.stringify({
  "@context": "https://schema.org/",
  "@type": "Product",
  "name": product.title,
  "image": product.images,
  "description": product.descriptionSnippet,
  "sku": sku,
  "brand": {
    "@type": "Brand",
    "name": "Ciara's Classroom"
  },
  "areaServed": {
    "@type": "Country",
    "name": countryInfo.name,
    "identifier": countryInfo.identifier
  },
  "aggregateRating": product.reviews > 0
    ? {
        "@type": "AggregateRating",
        "ratingValue": product.rating,
        "reviewCount": product.reviews
      }
    : undefined,
  "offers": {
    "@type": "Offer",
    "url": canonicalURL.toString(),
    "priceCurrency": countryInfo.currency,
    "price": product.currencies[countryInfo.currency],
    "priceValidUntil": "2024-12-31",
    "itemCondition": "https://schema.org/NewCondition",
    "availability": "https://schema.org/InStock",
    "areaServed": {
      "@type": "Country",
      "name": countryInfo.name,
      "identifier": countryInfo.identifier
    },
    "hasMerchantReturnPolicy": {
      "@type": "MerchantReturnPolicy",
      "applicableCountry": countryInfo.identifier,
      "returnPolicyCategory": "https://schema.org/MerchantReturnFiniteReturnWindow",
      "merchantReturnDays": 365,
      "returnMethod": "https://schema.org/ReturnByMail",
      "returnFees": "https://schema.org/FreeReturn",
      "returnPolicyLink": "https://ciarasclassroom.com/refund-policy/",
      "additionalProperty": [
        {
          "@type": "PropertyValue",
          "name": "RefundPolicy",
          "value": "All sales are final and nonrefundable for downloaded or accessed digital resources. Refunds are considered in specific scenarios within one year of purchase."
        },
        {
          "@type": "PropertyValue",
          "name": "RefundScenarios",
          "value": "Compromised resource file, misrepresentation, technical limitations, duplicate purchase, or unaccessed file status."
        }
      ]
    },
    "shippingDetails": {
      "@type": "OfferShippingDetails",
      "shippingRate": {
        "@type": "MonetaryAmount",
        "value": "0",
        "currency": countryInfo.currency
      },
      "shippingDestination": {
        "@type": "DefinedRegion",
        "addressCountry": countryInfo.identifier
      },
      "deliveryTime": {
        "@type": "ShippingDeliveryTime",
        "handlingTime": {
          "@type": "QuantitativeValue",
          "minValue": "0",
          "maxValue": "0",
          "unitCode": "DAY"
        },
        "transitTime": {
          "@type": "QuantitativeValue",
          "minValue": "0",
          "maxValue": "0",
          "unitCode": "DAY"
        }
      }
    }
  }
});

const formatPrice = (price: number | string): string => {
  if (typeof price === "string") {
    return price === "0.00" ? "Free" : `${product.currencySymbol}${price}`;
  }
  return price === 0 ? "Free" : `${product.currencySymbol}${price.toFixed(2)}`;
};
---

<Base
  title={product.title}
  description={product.descriptionSnippet}
  image={product.images[0]}
  external_image={true}
>
  <script type="application/ld+json" set:html={ProductSchema} />

  <div class="container mx-auto px-4 py-8">
    <article
      class="bg-white shadow-lg rounded-lg overflow-hidden"
      itemscope
      itemtype="https://schema.org/Product"
    >
      <meta itemprop="name" content={product.title} />
      <meta itemprop="description" content={product.descriptionSnippet} />
      <meta itemprop="sku" content={sku} />
      <div itemprop="brand" itemscope itemtype="https://schema.org/Brand">
        <meta itemprop="name" content="Ciara's Classroom" />
      </div>

      <div class="md:flex">
        <div class="md:w-1/2 p-4">
          <div class="w-full h-0 pb-[100%] relative mb-4">
            <Image
              src={product.images[0]}
              alt={product.title}
              width={400}
              height={400}
              class="absolute inset-0 w-full h-full object-contain"
              id="mainImage"
            />
          </div>
          <div class="grid grid-cols-4 gap-2">
            {product.images.map((image, index) => (
              <div class="aspect-w-1 aspect-h-1 cursor-pointer">
                <Image
                  src={image}
                  alt={`${product.title} - Image ${index + 1}`}
                  width={100}
                  height={100}
                  class={`rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 ease-in-out object-cover w-full h-full thumbnail ${index === 0 ? "border-2 border-primary" : ""}`}
                  data-src={image}
                />
              </div>
            ))}
          </div>
          <meta itemprop="image" content={product.images[0]} />
        </div>
        <div class="p-8 md:w-1/2">
          <header>
            <div class="uppercase tracking-wide text-sm text-primary font-semibold">
              {product.categories.join(", ")}
            </div>
            <h1 class="mt-1 text-3xl font-bold text-gray-900">
              {product.title}
            </h1>
          </header>
          <div set:html={product.description} class="mt-2 text-gray-600" />
          
          <div class="mt-4">
            <span class="text-gray-500">Price:</span>
            <span class="ml-2 text-2xl font-bold text-gray-900">
              {formatPrice(price)}
            </span>
          </div>

          {product.reviews > 0 && (
            <div class="mt-4 flex items-center">
              <span class="text-gray-500">Rating:</span>
              <span class="ml-2 text-yellow-500">
                {"★".repeat(Math.round(product.rating))}
                {"☆".repeat(5 - Math.round(product.rating))}
              </span>
              <span class="ml-2 text-gray-500">
                ({product.rating}/5 based on {product.reviews} reviews)
              </span>
            </div>
          )}

          <a
            href={product.link}
            class="mt-4 btn rounded-lg border border-light bg-transparent text-center transition hover:border-primary hover:bg-primary hover:text-white px-4 py-2 inline-block"
          >
            {price === 0 ? "Get for Free" : "Buy Now"}
          </a>

          <!-- Hidden metadata -->
          <div hidden>
            <div
              itemprop="offers"
              itemscope
              itemtype="https://schema.org/Offer"
            >
              <meta itemprop="price" content={price} />
              <meta itemprop="priceCurrency" content={product.currency} />
              <link itemprop="availability" href="https://schema.org/InStock" />
              <meta itemprop="priceValidUntil" content="2024-12-31" />
              <div itemprop="areaServed" itemscope itemtype="https://schema.org/Country">
                <meta itemprop="name" content={countryInfo.name} />
                <meta itemprop="identifier" content={countryInfo.identifier} />
              </div>
              <div itemprop="hasMerchantReturnPolicy" itemscope itemtype="https://schema.org/MerchantReturnPolicy">
                <meta itemprop="applicableCountry" content={countryInfo.identifier} />
                <link itemprop="returnPolicyCategory" href="https://schema.org/MerchantReturnFiniteReturnWindow" />
                <meta itemprop="merchantReturnDays" content="365" />
                <link itemprop="returnMethod" href="https://schema.org/ReturnByMail" />
                <link itemprop="returnFees" href="https://schema.org/FreeReturn" />
                <link itemprop="returnPolicyLink" href="https://ciarasclassroom.com/refund-policy/" />
                <div itemprop="additionalProperty" itemscope itemtype="https://schema.org/PropertyValue">
                  <meta itemprop="name" content="RefundPolicy" />
                  <meta itemprop="value" content="All sales are final and nonrefundable for downloaded or accessed digital resources. Refunds are considered in specific scenarios within one year of purchase." />
                </div>
                <div itemprop="additionalProperty" itemscope itemtype="https://schema.org/PropertyValue">
                  <meta itemprop="name" content="RefundScenarios" />
                  <meta itemprop="value" content="Compromised resource file, misrepresentation, technical limitations, duplicate purchase, or unaccessed file status." />
                </div>
              </div>
              <div itemprop="shippingDetails" itemscope itemtype="https://schema.org/OfferShippingDetails">
                <div itemprop="shippingRate" itemscope itemtype="https://schema.org/MonetaryAmount">
                  <meta itemprop="value" content="0" />
                  <meta itemprop="currency" content={countryInfo.currency} />
                </div>
                <div itemprop="shippingDestination" itemscope itemtype="https://schema.org/DefinedRegion">
                  <meta itemprop="addressCountry" content={countryInfo.identifier} />
                </div>
                <div itemprop="deliveryTime" itemscope itemtype="https://schema.org/ShippingDeliveryTime">
                  <div itemprop="handlingTime" itemscope itemtype="https://schema.org/QuantitativeValue">
                    <meta itemprop="minValue" content="0" />
                    <meta itemprop="maxValue" content="0" />
                    <meta itemprop="unitCode" content="DAY" />
                  </div>
                  <div itemprop="transitTime" itemscope itemtype="https://schema.org/QuantitativeValue">
                    <meta itemprop="minValue" content="0" />
                    <meta itemprop="maxValue" content="0" />
                    <meta itemprop="unitCode" content="DAY" />
                  </div>
                </div>
              </div>
            </div>
            {product.reviews > 0 && (
              <div itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
                <meta itemprop="ratingValue" content={product.rating} />
                <meta itemprop="reviewCount" content={product.reviews} />
              </div>
            )}
          </div>
        </div>
      </div>
    </article>
  </div>
</Base>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mainImage = document.getElementById("mainImage") as HTMLImageElement;
    const thumbnails = document.querySelectorAll(".thumbnail");

    thumbnails.forEach((thumb) => {
      thumb.addEventListener("click", function () {
        const src = this.getAttribute("data-src");
        if (src && mainImage) {
          mainImage.src = src;
          thumbnails.forEach((t) =>
            t.classList.remove("border-2", "border-primary"),
          );
          this.classList.add("border-2", "border-primary");
        }
      });
    });
  });
</script>